version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_logs:/var/log/kafka

  mongodb:
    image: mongo:5.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: superset
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: superset
    environment:
      SUPERSET_SECRET_KEY: "supersecretkey"
      DATABASE_URL: postgresql+psycopg2://superset:superset@postgres:5432/superset
    ports:
      - "8088:8088"
    depends_on:
      - postgres
    volumes:
      - superset_home:/app/superset_home
      - ./superset/config:/app/config  # Mount the config folder here
    command: >
      bash -c "
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin || true &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088
      "

  kafka-producer:
    build:
      context: ./kafka-producer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    restart: on-failure
    volumes:
      - ./kafka-producer:/app  # Mount the Kafka producer folder
    command: >
      bash -c "
        python /app/producer.py
      "

  kafka-consumer:
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - mongodb
    restart: on-failure
    volumes:
      - ./kafka-consumer:/app  # Mount the Kafka consumer folder
    command: >
      bash -c "
        python /app/consumer.py
      "

  event-generator:
    build:
      context: ./event-generator
      dockerfile: Dockerfile
    depends_on:
      - kafka
    restart: on-failure
    volumes:
      - ./event-generator:/app  # Mount the event generator folder
    command: >
      bash -c "
        python /app/event_generator.py
      "

volumes:
  mongo_data:
  kafka_logs:
  postgres_data:
  superset_home: